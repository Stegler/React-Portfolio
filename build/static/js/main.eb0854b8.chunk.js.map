{"version":3,"sources":["images/clickygame.png","images/netscape.png","components/Accordion/index.js","components/Jumbotron/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Menu","Accordion","defaultActiveKey","Card","Toggle","as","Header","eventKey","Collapse","Body","Container","style","width","marginBottom","Img","variant","src","ClickyGame","Title","Text","href","Button","Netscape","Component","Jumbotron","paddingBottom","fluid","className","fontSize","paddingLeft","React","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,oPCKtBC,E,iLAEb,OACI,6BACI,kBAACC,EAAA,EAAD,CAAWC,iBAAiB,KACxB,kBAACC,EAAA,EAAD,KACI,kBAACF,EAAA,EAAUG,OAAX,CAAkBC,GAAIF,IAAKG,OAAQC,SAAS,KAA5C,YAIA,kBAACN,EAAA,EAAUO,SAAX,CAAoBD,SAAS,KACzB,kBAACJ,EAAA,EAAKM,KAAN,KACI,kBAACC,EAAA,EAAD,opBAKZ,kBAACP,EAAA,EAAD,KACI,kBAACF,EAAA,EAAUG,OAAX,CAAkBC,GAAIF,IAAKG,OAAQC,SAAS,KAA5C,YAIA,kBAACN,EAAA,EAAUO,SAAX,CAAoBD,SAAS,KACzB,kBAACJ,EAAA,EAAKM,KAAN,KACI,kBAACC,EAAA,EAAD,KAEI,kBAACP,EAAA,EAAD,CAAMQ,MAAO,CAAEC,MAAO,OAAQC,aAAc,SACxC,kBAACV,EAAA,EAAKW,IAAN,CAAUC,QAAQ,MAAMC,IAAMC,MAC9B,kBAACd,EAAA,EAAKM,KAAN,KACI,kBAACN,EAAA,EAAKe,MAAN,8BACA,kBAACf,EAAA,EAAKgB,KAAN,wDAIJ,uBAAGC,KAAK,yCAAyCL,QAAQ,QAAO,kBAACM,EAAA,EAAD,CAAQN,QAAQ,QAAhB,aAIpE,kBAACZ,EAAA,EAAD,CAAMQ,MAAO,CAAEC,MAAO,SAClB,kBAACT,EAAA,EAAKW,IAAN,CAAUC,QAAQ,MAAMC,IAAMM,MAC9B,kBAACnB,EAAA,EAAKM,KAAN,KACI,kBAACN,EAAA,EAAKe,MAAN,oBACA,kBAACf,EAAA,EAAKgB,KAAN,wGAIJ,uBAAGC,KAAK,sCAAsCL,QAAQ,QAAO,kBAACM,EAAA,EAAD,CAAQN,QAAQ,QAAhB,iBASjF,kBAACZ,EAAA,EAAD,KACI,kBAACF,EAAA,EAAUG,OAAX,CAAkBC,GAAIF,IAAKG,OAAQC,SAAS,KAA5C,WAGA,kBAACN,EAAA,EAAUO,SAAX,CAAoBD,SAAS,KACzB,kBAACJ,EAAA,EAAKM,KAAN,gE,GA5DMc,a,QCcnBL,E,iLAbP,OACI,6BACI,kBAACM,EAAA,EAAD,CAAWb,MAAO,CAAEc,cAAe,QAASZ,aAAc,OAAQa,OAAK,GACnE,kBAAChB,EAAA,EAAD,CAAWiB,UAAU,cACjB,wBAAIhB,MAAO,CAAEiB,SAAU,SAAvB,gBACA,wBAAIjB,MAAO,CAAEiB,SAAU,OAAQC,YAAa,QAA5C,+B,GARJC,IAAMP,WCcXQ,E,iLATX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUD,IAAMP,WCOJS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.eb0854b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clickygame.39687d18.png\";","module.exports = __webpack_public_path__ + \"static/media/netscape.735f76ae.png\";","import React, { Component } from 'react'\nimport { Accordion, Button, Card, Container } from 'react-bootstrap';\nimport ClickyGame from '../../images/clickygame.png'\nimport Netscape from '../../images/netscape.png'\n\nexport default class Menu extends Component {\n    render() {\n        return (\n            <div>\n                <Accordion defaultActiveKey=\"0\">\n                    <Card>\n                        <Accordion.Toggle as={Card.Header} eventKey=\"0\">\n                            About Me\n                        </Accordion.Toggle>\n\n                        <Accordion.Collapse eventKey=\"0\">\n                            <Card.Body>\n                                <Container>Hello, my name's David Steger. I am a recent UW full-stack bootcamp graduate with a passion for web development and front end design. I graduated from Central Washington University as a biology major but quickly found my true interest in technology. The ongoing rise of tech has made such a positive impact in my life that I wanted to be a part of that innovation, which has brought me to where I am today! A growing software developer learning the craft of building elegant, usefull and efficeint web applications each day! It's exciting to be on the cutting edge of how most of the world is run today. I cannot wait to see how my journey unfolds.</Container>\n                            </Card.Body>\n                        </Accordion.Collapse>\n                    </Card>\n\n                    <Card>\n                        <Accordion.Toggle as={Card.Header} eventKey=\"1\">\n                            Projects\n                            </Accordion.Toggle>\n\n                        <Accordion.Collapse eventKey=\"1\">\n                            <Card.Body>\n                                <Container>\n\n                                    <Card style={{ width: '100%', marginBottom: '20px' }}>\n                                        <Card.Img variant=\"top\" src={ ClickyGame } />\n                                        <Card.Body>\n                                            <Card.Title>Car Click Memory Game</Card.Title>\n                                            <Card.Text>\n                                                Test your memory in this Car Click Memory Game!\n                                        </Card.Text>\n\n                                        <a href=\"https://github.com/Stegler/Clicky-Game\" variant=\"info\"><Button variant=\"info\">GitHub</Button></a>\n                                        </Card.Body>\n                                    </Card>\n\n                                    <Card style={{ width: '100%' }}>\n                                        <Card.Img variant=\"top\" src={ Netscape } />\n                                        <Card.Body>\n                                            <Card.Title>Cave Runner</Card.Title>\n                                            <Card.Text>\n                                                2D Platform game. Collect the coins as fast as you can! See where you rank on the leaderboards!\n                                        </Card.Text>\n\n                                        <a href=\"https://github.com/Stegler/Netscape\" variant=\"info\"><Button variant=\"info\">GitHub</Button></a>\n\n                                        </Card.Body>\n                                    </Card>\n\n                                </Container>\n                            </Card.Body>\n                        </Accordion.Collapse>\n                    </Card>\n                    <Card>\n                        <Accordion.Toggle as={Card.Header} eventKey=\"2\">\n                            Contact\n    </Accordion.Toggle>\n                        <Accordion.Collapse eventKey=\"2\">\n                            <Card.Body>Email: d.steger@ymail.com |\n                                Phone: 360-528-1280\n                            </Card.Body>\n                        </Accordion.Collapse>\n                    </Card>\n                </Accordion>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport { Container, Jumbotron } from 'react-bootstrap';\n\nclass Title extends React.Component {\n\n    render() {\n        return (\n            <div>\n                <Jumbotron style={{ paddingBottom: \"200px\", marginBottom: \"0px\"}} fluid>\n                    <Container className=\"montserrat\">\n                        <h1 style={{ fontSize: \"70px\" }}>DAVID STEGER</h1>\n                        <h1 style={{ fontSize: \"30px\", paddingLeft: \"6px\" }}>MERN Stack Developer</h1>\n                    </Container>\n                </Jumbotron>\n            </div>\n        );\n    }\n}\n\nexport default Title;\n","import React from 'react';\nimport './App.css';\nimport Menu from './components/Accordion'\nimport Title from './components/Jumbotron'\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div>\n        <Title />\n        <Menu />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}